// Code generated by mockery v1.0.0. DO NOT EDIT.

package web

import context "context"
import db "github.com/ShoshinNikita/budget-manager/internal/db"
import mock "github.com/stretchr/testify/mock"

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

// AddIncome provides a mock function with given fields: ctx, args
func (_m *MockDatabase) AddIncome(ctx context.Context, args db.AddIncomeArgs) (uint, error) {
	ret := _m.Called(ctx, args)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.AddIncomeArgs) uint); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.AddIncomeArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMonthlyPayment provides a mock function with given fields: ctx, args
func (_m *MockDatabase) AddMonthlyPayment(ctx context.Context, args db.AddMonthlyPaymentArgs) (uint, error) {
	ret := _m.Called(ctx, args)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.AddMonthlyPaymentArgs) uint); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.AddMonthlyPaymentArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSpend provides a mock function with given fields: ctx, args
func (_m *MockDatabase) AddSpend(ctx context.Context, args db.AddSpendArgs) (uint, error) {
	ret := _m.Called(ctx, args)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.AddSpendArgs) uint); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.AddSpendArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSpendType provides a mock function with given fields: ctx, name
func (_m *MockDatabase) AddSpendType(ctx context.Context, name string) (uint, error) {
	ret := _m.Called(ctx, name)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditIncome provides a mock function with given fields: ctx, args
func (_m *MockDatabase) EditIncome(ctx context.Context, args db.EditIncomeArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.EditIncomeArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditMonthlyPayment provides a mock function with given fields: ctx, args
func (_m *MockDatabase) EditMonthlyPayment(ctx context.Context, args db.EditMonthlyPaymentArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.EditMonthlyPaymentArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditSpend provides a mock function with given fields: ctx, args
func (_m *MockDatabase) EditSpend(ctx context.Context, args db.EditSpendArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.EditSpendArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditSpendType provides a mock function with given fields: ctx, id, newName
func (_m *MockDatabase) EditSpendType(ctx context.Context, id uint, newName string) error {
	ret := _m.Called(ctx, id, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, id, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDay provides a mock function with given fields: ctx, id
func (_m *MockDatabase) GetDay(ctx context.Context, id uint) (*db.Day, error) {
	ret := _m.Called(ctx, id)

	var r0 *db.Day
	if rf, ok := ret.Get(0).(func(context.Context, uint) *db.Day); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Day)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDayIDByDate provides a mock function with given fields: ctx, year, month, day
func (_m *MockDatabase) GetDayIDByDate(ctx context.Context, year int, month int, day int) (uint, error) {
	ret := _m.Called(ctx, year, month, day)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) uint); ok {
		r0 = rf(ctx, year, month, day)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, year, month, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonth provides a mock function with given fields: ctx, id
func (_m *MockDatabase) GetMonth(ctx context.Context, id uint) (*db.Month, error) {
	ret := _m.Called(ctx, id)

	var r0 *db.Month
	if rf, ok := ret.Get(0).(func(context.Context, uint) *db.Month); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Month)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthID provides a mock function with given fields: ctx, year, month
func (_m *MockDatabase) GetMonthID(ctx context.Context, year int, month int) (uint, error) {
	ret := _m.Called(ctx, year, month)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, int, int) uint); ok {
		r0 = rf(ctx, year, month)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, year, month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonths provides a mock function with given fields: ctx, year
func (_m *MockDatabase) GetMonths(ctx context.Context, year int) ([]*db.Month, error) {
	ret := _m.Called(ctx, year)

	var r0 []*db.Month
	if rf, ok := ret.Get(0).(func(context.Context, int) []*db.Month); ok {
		r0 = rf(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Month)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpendTypes provides a mock function with given fields: ctx
func (_m *MockDatabase) GetSpendTypes(ctx context.Context) ([]*db.SpendType, error) {
	ret := _m.Called(ctx)

	var r0 []*db.SpendType
	if rf, ok := ret.Get(0).(func(context.Context) []*db.SpendType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.SpendType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIncome provides a mock function with given fields: ctx, id
func (_m *MockDatabase) RemoveIncome(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMonthlyPayment provides a mock function with given fields: ctx, id
func (_m *MockDatabase) RemoveMonthlyPayment(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveSpend provides a mock function with given fields: ctx, id
func (_m *MockDatabase) RemoveSpend(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveSpendType provides a mock function with given fields: ctx, id
func (_m *MockDatabase) RemoveSpendType(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchSpends provides a mock function with given fields: ctx, args
func (_m *MockDatabase) SearchSpends(ctx context.Context, args db.SearchSpendsArgs) ([]*db.Spend, error) {
	ret := _m.Called(ctx, args)

	var r0 []*db.Spend
	if rf, ok := ret.Get(0).(func(context.Context, db.SearchSpendsArgs) []*db.Spend); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Spend)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.SearchSpendsArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
